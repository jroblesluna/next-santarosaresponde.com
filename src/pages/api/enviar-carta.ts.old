// pages/api/enviar-carta.ts

import type { NextApiRequest, NextApiResponse } from "next";

type Data = {
  result?: string;
  error?: string;
};

export default async function handler(
  req: NextApiRequest,
  res: NextApiResponse<Data>
) {
  if (req.method === "POST") {
    const { name, message } = req.body;

    if (!name || !message) {
      res.status(400).json({ error: "Todos los campos son requeridos" });
      return;
    }

    const openaiApiKey = process.env.OPENAI_API_KEY;
    const openaiOrganization = process.env.OPENAI_ORGANIZATION;
    const systemMessage = process.env.SYSTEM_MESSAGE;

    if (!openaiApiKey || !openaiOrganization) {
      res
        .status(500)
        .json({
          error:
            "La clave de API de OpenAI o la organización no están configuradas",
        });
      return;
    }

    try {
      const response = await fetch(
        "https://api.openai.com/v1/chat/completions",
        {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
            Authorization: `Bearer ${openaiApiKey}`,
            "OpenAI-Organization": openaiOrganization,
          },
          body: JSON.stringify({
            model: "gpt-3.5-turbo",
            messages: [
              {
                role: "system",
                content: systemMessage,
              },
              {
                role: "user",
                content: `Nombre: ${name}\nCarta: ${message}`,
              },
            ],
            temperature: 0.7,
            max_tokens: 1000,
            top_p: 1.0,
            frequency_penalty: 0.0,
            presence_penalty: 0.0,
          }),
        }
      );

      if (!response.ok) {
        const error = await response.json();
        console.error("Error en la respuesta de OpenAI:", error);
        res.status(response.status).json({ error: error.message });
        return;
      }

      const data = await response.json();

      if (!data.choices || !data.choices.length) {
        console.error("La respuesta de OpenAI no contiene 'choices'.", data);
        res.status(500).json({ error: "La respuesta de OpenAI no es válida" });
        return;
      }

      const result = data.choices[0].message.content.trim();
      res.status(200).json({ result });
    } catch (error) {
      console.error("Error durante la solicitud a OpenAI:", error);
      res
        .status(500)
        .json({
          error: "Ocurrió un error al generar la respuesta de Santa Rosa",
        });
    }
  } else {
    res.status(405).json({ error: "Método no permitido" });
  }
}
